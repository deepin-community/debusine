# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
envlist =
    {py311,py312,py313}-{django42}-{server,signing}-unit-tests,
    {py311,py312,py313}-client-tests,
    pyupgrade,
    flake8,
    black,
    format,
    codespell,
    mypy,
# Ensure we have no warnings on last Django LTS
    py311-django42-server-no-warnings,
# Ensure we don't have missing migration files
    py311-django42-migrations
skipsdist = True
skip_missing_interpreters = True

[main]
django_debusine_packages = debusine.db debusine.server debusine.web debusine.project debusine.test

[testenv]
setenv =
    LANG=C
    PYTHONASYNCIODEBUG=1
    PYTHONDEBUG=1
    signing: DJANGO_SETTINGS_MODULE=debusine.signing.settings
passenv =
    PGHOST
    PGPASSWORD
    PGPORT
    PGUSER
    PYTHONDEVMODE
commands =
    server-unit-tests: {envpython} ./manage.py test {[main]django_debusine_packages} {posargs}
    signing-unit-tests: {envpython} ./manage.py test debusine.signing {posargs}
    client-tests:
        {envpython} -m unittest discover debusine.artifacts {posargs}
        {envpython} -m unittest discover debusine.assets {posargs}
        {envpython} -m unittest discover debusine.client {posargs}
        {envpython} -m unittest discover debusine.tasks {posargs}
        {envpython} -m unittest discover debusine.utils {posargs}
        {envpython} -m unittest discover debusine.worker {posargs}
    server-no-warnings: {envpython} -W error ./manage.py test {[main]django_debusine_packages} {posargs}
    server-show-warnings: {envpython} -W all ./manage.py test {[main]django_debusine_packages} {posargs}
    check: {envpython} ./manage.py check {posargs}
    migrations: {envpython} ./manage.py makemigrations --check --dry-run {posargs}
deps =
    -e.
    django42: Django>=4.2,<5.3
    migrations: -e.[server]
    server: -e.[server,tests]
    signing: -e.[signing,tests]

[testenv:pyupgrade]
commands = pyup-dirs --recursive --keep-percent-format --py311-plus debusine bin/playground-vm examples/playground/populate {posargs}
deps = pyupgrade-directories

[testenv:flake8]
commands = {envpython} -m flake8 --docstring-convention=all --unused-arguments-ignore-variadic-names --unused-arguments-ignore-stub-functions debusine/ debian/tests/ bin/playground-vm examples/playground/populate {posargs}
deps =
    flake8
    flake8-absolute-import
    flake8-builtins
    flake8-docstrings
    flake8-logging-format
    flake8-rst-docstrings
    flake8-unused-arguments
# https://github.com/globality-corp/flake8-logging-format/issues/68:
    setuptools

[testenv:black]
# Disable the PYTHON*DEBUG variables that generate noise in the black output
setenv = LANG=C.UTF-8
commands = {envpython} -m black --check --diff debusine/ debian/tests/ bin/playground-vm examples/playground/populate {posargs}
deps = black>=22.1

[testenv:format]
# Disable the PYTHON*DEBUG variables that generate noise in the black output
setenv = LANG=C.UTF-8
commands = {envpython} -m black --diff debusine/ debian/tests/ bin/playground-vm examples/playground/populate {posargs}
           {envpython} -m black debusine/ debian/tests/ bin/playground-vm examples/playground/populate {posargs}
           {envpython} -m isort --diff debusine/ debian/tests/ bin/playground-vm examples/playground/populate {posargs}
           {envpython} -m isort debusine/ debian/tests/ bin/playground-vm examples/playground/populate {posargs}
           {envpython} -m djlint --reformat debusine/web/templates {posargs}
deps = black>=22.1
       djlint
       isort

[testenv:djlint]
setenv = LANG=C.UTF-8
commands = {envpython} -m djlint --check debusine/web/templates {posargs}
           {envpython} -m djlint --lint debusine/web/templates {posargs}
deps = djlint

[testenv:codespell]
allowlist_externals = codespell
commands = codespell --skip="./data/*" {posargs}
deps = codespell

[testenv:mypy]
commands = mypy {posargs}
deps =
    mypy
    .[server,client,signing,tests]
    boto3-stubs[boto3,ec2,s3]
    django-stubs[compatible-mypy]
    djangorestframework-stubs
    pydantic[email]
    responses != 0.25.5
    types-lxml
    types-paramiko
    types-psutil
    types-pygments
    types-python-dateutil
    types-PyYAML
    types-requests

[testenv:shellcheck]
allowlist_externals = sh
commands = sh -c '\
    (git ls-files | file --mime-type --no-pad --no-buffer --files-from - | \
     grep ": text/x-shellscript\$" | cut -d: -f1; \
     echo debian/tests/utils/add-debusine-log-files-to-artifacts.sh) \
    | xargs shellcheck'
deps =
    shellcheck-py

[flake8]
max-complexity = 12
max-line-length = 80
exclude = .git,.ropeproject,.tox,__pycache__,debusine/project/settings/local.py,debusine/signing/settings/local.py,docs/conf.py,*/migrations/[0-9]*.py
ignore =
# class attribute shadow a builtin function
    A003,
# line break after/before binary operator
    W504, W503
# rules for flake8-docstrings
# docstring - "Missing docstring in public nested class"
    D106,
# docstring - "Multi-line docstring summary should start at the first line"
    D212,
# docstring - "1 blank line required before class docstring"
    D203,
# https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#flake8
# whitespace before ':' (conflicts with black)
    E203,
# multiple statements on one line (def) (conflicts with black)
    E704,
# an unused argument starting with an underscore
    U101,
per-file-ignores=
# D102 Missing docstring in public method
#      (unfortunately it cannot be ignored only in test_* methods)
# D205 1 blank line required between summary line and description
# D400 First line should end with a period
# D401 First line should be in imperative mood
# D415 First line should end with a period, question mark, or exclamation point
  */tests/test_*.py:D102,D205,D400,D401,D415

builtins-allowed-modules =
# Shadowed by debusine.server.collections, but since we always use absolute
# imports this doesn't cause a problem.
    collections,
enable-extensions = G
application-import-names = debusine
rst-directives = graphviz dynamic_data
rst-roles =
# https://www.sphinx-doc.org/en/master/usage/referencing.html#role-ref
    ref
# https://www.sphinx-doc.org/en/master/usage/domains/python.html (each one
# listed twice, since "py" is the default domain)
    attr
    class
    const
    data
    exc
    func
    meth
    mod
    obj
    py:attr
    py:class
    py:const
    py:data
    py:exc
    py:func
    py:meth
    py:mod
    py:obj

[pycodestyle]
max-line-length = 80
